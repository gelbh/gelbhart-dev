<% content_for :title, page_title("Video Captioner") %>
<% meta_description "Generate and translate video captions from YouTube videos or local files. Powered by AI transcription with support for multiple languages." %>

<section class="container pt-5 mt-5">
  <h1 class="display-4 text-center mb-4">
    Video Captioner
  </h1>
  <p class="lead text-center text-muted mb-3">
    Desktop Tool - Process videos locally on your computer
  </p>
  <p class="text-center text-muted mb-5">
    <small>No server uploads, no file size limits, 100% private</small>
  </p>

  <div class="row justify-content-center">
    <div class="col-lg-8">
      <!-- Download Section -->
      <div class="card shadow-sm mb-4 border-primary">
        <div class="card-body p-4 text-center">
          <i class="bx bx-download display-1 text-primary mb-3"></i>
          <h3 class="mb-3">Download Desktop Tool</h3>
          <p class="text-muted mb-4">Just double-click to launch! The app automatically installs everything it needs on first run.</p>
          <a href="/downloads/video_captioner.pyw" download class="btn btn-primary btn-lg mb-2">
            <i class="bx bx-download me-2"></i>Download GUI Version (Recommended)
          </a>
          <br>
          <small class="text-muted d-block my-2">Windows users: Use .pyw (no terminal window) | Mac/Linux users: Use .py</small>
          <a href="/downloads/video_captioner.py" download class="btn btn-outline-primary btn-sm me-2">
            <i class="bx bx-download me-1"></i>.py version
          </a>
          <a href="/downloads/video_captioner_standalone.py" download class="btn btn-outline-secondary btn-sm">
            <i class="bx bx-terminal me-1"></i>CLI Version
          </a>
        </div>
      </div>

      <!-- Requirements -->
      <div class="card shadow-sm mb-4">
        <div class="card-body p-4">
          <h4 class="mb-3">üìã Requirements</h4>
          <ul class="mb-0">
            <li><strong>Python 3.8+</strong> - <a href="https://www.python.org/downloads/" target="_blank">Download here</a></li>
          </ul>
          <p class="text-muted mt-3 mb-0"><small>All dependencies (whisper, yt-dlp, deep-translator, FFmpeg) are automatically installed on first run. No manual installation needed!</small></p>
        </div>
      </div>

      <!-- Usage -->
      <div class="card shadow-sm mb-4">
        <div class="card-body p-4">
          <h4 class="mb-3">üöÄ How to Use</h4>

          <div class="alert alert-warning mb-3">
            <strong>Windows users (.pyw file):</strong> Just double-click the downloaded file!<br>
            <strong>Windows users (.py file):</strong> Right-click ‚Üí "Open with" ‚Üí "Python"<br>
            <strong>Mac/Linux users:</strong> Open Terminal, type <code>python3 </code> (with a space), then drag the file into Terminal and press Enter
          </div>

          <ol>
            <li class="mb-2">Launch the downloaded file (double-click on Windows .pyw, or use Python for .py files)</li>
            <li class="mb-2">On first run, a window will pop up asking to install required packages
              <ul class="mt-2">
                <li>Click the "Install" button</li>
                <li>Wait 5-10 minutes for automatic installation</li>
                <li>The app will restart automatically when done</li>
              </ul>
            </li>
            <li class="mb-2">Use the friendly interface to:
              <ul class="mt-2">
                <li>Browse for a local video or paste a YouTube URL</li>
                <li>Choose source language (or auto-detect)</li>
                <li>Optionally translate to another language</li>
                <li>Select output format (SRT file or burned captions)</li>
                <li>Choose AI model size (base recommended)</li>
              </ul>
            </li>
            <li class="mb-2">Click "Generate Captions" and watch the progress</li>
            <li>Your captioned file will be saved to your chosen output folder!</li>
          </ol>

          <div class="alert alert-info mt-3">
            <strong>Tip:</strong> After the first run, you can double-click the file to launch it directly (if Python is configured as the default app for .py files).
          </div>
        </div>
      </div>

      <!-- Old form (hidden for reference, can be removed) -->
      <div style="display: none;">
        <div class="card shadow-sm">
          <div class="card-body p-4">
            <form id="captioner-form">
            <!-- Video Input -->
            <div class="mb-4">
              <label for="video-url" class="form-label fw-bold">üìπ Video Input</label>
              <input
                type="text"
                class="form-control"
                id="video-url"
                placeholder="Enter YouTube URL or paste video file path"
                required
              >
              <div class="form-text">YouTube URL or local video file path</div>
            </div>

            <!-- Language Settings -->
            <div class="mb-4">
              <label for="source-language" class="form-label fw-bold">üåç Source Language (Optional)</label>
              <select class="form-select" id="source-language">
                <option value="">Auto-detect</option>
              </select>
              <div class="form-text">Select source language or leave as auto-detect</div>
            </div>

            <!-- Translation -->
            <div class="mb-4">
              <label class="form-label fw-bold">üîÑ Translation (Optional)</label>
              <div class="form-check mb-2">
                <input class="form-check-input" type="checkbox" id="enable-translation">
                <label class="form-check-label" for="enable-translation">
                  Translate captions to another language
                </label>
              </div>
              <select class="form-select" id="target-language" disabled>
                <option value="">Select a language</option>
              </select>
              <div class="form-text">Select target language for translation</div>
            </div>

            <!-- Output Format -->
            <div class="mb-4">
              <label class="form-label fw-bold">üíæ Output Format</label>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="output-format" id="format-srt" value="srt" checked>
                <label class="form-check-label" for="format-srt">
                  SRT file only (can be used with any video player)
                </label>
              </div>
              <div class="form-check">
                <input class="form-check-input" type="radio" name="output-format" id="format-burn" value="burn">
                <label class="form-check-label" for="format-burn">
                  Burn captions into video (creates new video with hardcoded subtitles)
                </label>
              </div>
            </div>

            <!-- Model Size -->
            <div class="mb-4">
              <label for="model-size" class="form-label fw-bold">ü§ñ Model Size</label>
              <select class="form-select" id="model-size">
                <option value="tiny">Tiny - Fastest, least accurate</option>
                <option value="base" selected>Base - Good balance (recommended)</option>
                <option value="small">Small - Better accuracy, slower</option>
                <option value="medium">Medium - Very accurate, much slower</option>
                <option value="large">Large - Best accuracy, slowest</option>
              </select>
            </div>

            <!-- Progress/Status -->
            <div id="status-area" class="mb-3" style="display: none;">
              <div class="alert alert-info" role="alert">
                <div class="d-flex align-items-center">
                  <div class="spinner-border spinner-border-sm me-2" role="status">
                    <span class="visually-hidden">Processing...</span>
                  </div>
                  <div id="status-text">Processing your video...</div>
                </div>
              </div>
            </div>

            <!-- Result Area - Hidden, will show as modal -->
            <div id="result-area" style="display: none;"></div>

            <!-- Error Area -->
            <div id="error-area" class="mb-3" style="display: none;">
              <div class="alert alert-danger" role="alert">
                <h5>‚ùå Error</h5>
                <p id="error-message" class="mb-0"></p>
              </div>
            </div>

            <!-- Submit Button -->
            <div class="d-grid">
              <button type="submit" class="btn btn-primary btn-lg" id="submit-btn">
                Generate Captions
              </button>
            </div>

            <!-- Reopen Result Button (hidden until success) -->
            <div id="reopen-result-area" class="mt-3" style="display: none;">
              <div class="d-grid">
                <button type="button" class="btn btn-success btn-lg" id="reopen-result-btn">
                  <i class="bx bx-check-circle me-2"></i>Show Results
                </button>
              </div>
            </div>
          </form>
        </div>
      </div>

      <!-- Info Card -->
      <div class="card mt-4">
        <div class="card-body">
          <h5 class="card-title">‚ÑπÔ∏è How it works</h5>
          <ul class="mb-0">
            <li>Paste a YouTube URL or provide a video file path</li>
            <li>Choose source language or let AI auto-detect it</li>
            <li>Optionally translate captions to another language</li>
            <li>Select output format (SRT subtitle file or burn into video)</li>
            <li>Choose model size (larger = more accurate but slower)</li>
            <li>Download your captioned file!</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</section>

<!-- Success Modal -->
<div class="modal fade" id="successModal" tabindex="-1" aria-labelledby="successModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title text-success" id="successModalLabel">‚úÖ Caption Generation Complete!</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="row mb-3">
          <div class="col-md-6 mb-2">
            <strong>üìπ Video Title:</strong>
            <p id="modal-video-title" class="mb-0 text-muted"></p>
          </div>
          <div class="col-md-6 mb-2">
            <strong>‚è±Ô∏è Duration:</strong>
            <p id="modal-duration" class="mb-0 text-muted"></p>
          </div>
        </div>
        <div class="row mb-3">
          <div class="col-md-6 mb-2">
            <strong>üéôÔ∏è Audio Language:</strong>
            <p id="modal-audio-lang" class="mb-0 text-muted"></p>
          </div>
          <div class="col-md-6 mb-2">
            <strong>üìù Subtitle Language:</strong>
            <p id="modal-subtitle-lang" class="mb-0 text-muted"></p>
          </div>
        </div>
        <div id="modal-warning" class="alert alert-warning" style="display: none;">
          <strong>‚ö†Ô∏è Warning:</strong> <span id="modal-warning-text"></span>
        </div>
      </div>
      <div class="modal-footer" id="modal-footer-buttons">
        <a id="modal-download-link" href="#" class="btn btn-success btn-lg" download>
          <i class="bx bx-download me-2"></i>Download File
        </a>
        <a id="modal-video-download-link" href="#" class="btn btn-primary btn-lg" download style="display: none;">
          <i class="bx bx-video me-2"></i>Download Video
        </a>
      </div>
    </div>
  </div>
</div>

<style>
  /* Fix dropdown options visibility in dark mode */
  [data-bs-theme="dark"] .form-select option {
    background-color: #1f2937;
    color: rgba(255, 255, 255, 0.85);
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('captioner-form');
  const enableTranslation = document.getElementById('enable-translation');
  const sourceLanguage = document.getElementById('source-language');
  const targetLanguage = document.getElementById('target-language');
  const statusArea = document.getElementById('status-area');
  const resultArea = document.getElementById('result-area');
  const errorArea = document.getElementById('error-area');
  const submitBtn = document.getElementById('submit-btn');

  // Common languages - using exact codes from deep-translator GoogleTranslator
  const languages = [
    { name: 'Afrikaans', code: 'af' },
    { name: 'Albanian', code: 'sq' },
    { name: 'Amharic', code: 'am' },
    { name: 'Arabic', code: 'ar' },
    { name: 'Armenian', code: 'hy' },
    { name: 'Azerbaijani', code: 'az' },
    { name: 'Basque', code: 'eu' },
    { name: 'Belarusian', code: 'be' },
    { name: 'Bengali', code: 'bn' },
    { name: 'Bosnian', code: 'bs' },
    { name: 'Bulgarian', code: 'bg' },
    { name: 'Catalan', code: 'ca' },
    { name: 'Chinese (Simplified)', code: 'zh-CN' },
    { name: 'Chinese (Traditional)', code: 'zh-TW' },
    { name: 'Croatian', code: 'hr' },
    { name: 'Czech', code: 'cs' },
    { name: 'Danish', code: 'da' },
    { name: 'Dutch', code: 'nl' },
    { name: 'English', code: 'en' },
    { name: 'Estonian', code: 'et' },
    { name: 'Finnish', code: 'fi' },
    { name: 'French', code: 'fr' },
    { name: 'Galician', code: 'gl' },
    { name: 'Georgian', code: 'ka' },
    { name: 'German', code: 'de' },
    { name: 'Greek', code: 'el' },
    { name: 'Gujarati', code: 'gu' },
    { name: 'Hebrew', code: 'iw' },
    { name: 'Hindi', code: 'hi' },
    { name: 'Hungarian', code: 'hu' },
    { name: 'Icelandic', code: 'is' },
    { name: 'Indonesian', code: 'id' },
    { name: 'Irish', code: 'ga' },
    { name: 'Italian', code: 'it' },
    { name: 'Japanese', code: 'ja' },
    { name: 'Javanese', code: 'jw' },
    { name: 'Kannada', code: 'kn' },
    { name: 'Kazakh', code: 'kk' },
    { name: 'Khmer', code: 'km' },
    { name: 'Korean', code: 'ko' },
    { name: 'Kurdish', code: 'ku' },
    { name: 'Lao', code: 'lo' },
    { name: 'Latin', code: 'la' },
    { name: 'Latvian', code: 'lv' },
    { name: 'Lithuanian', code: 'lt' },
    { name: 'Macedonian', code: 'mk' },
    { name: 'Malay', code: 'ms' },
    { name: 'Malayalam', code: 'ml' },
    { name: 'Maltese', code: 'mt' },
    { name: 'Maori', code: 'mi' },
    { name: 'Marathi', code: 'mr' },
    { name: 'Mongolian', code: 'mn' },
    { name: 'Myanmar', code: 'my' },
    { name: 'Nepali', code: 'ne' },
    { name: 'Norwegian', code: 'no' },
    { name: 'Persian', code: 'fa' },
    { name: 'Polish', code: 'pl' },
    { name: 'Portuguese', code: 'pt' },
    { name: 'Punjabi', code: 'pa' },
    { name: 'Romanian', code: 'ro' },
    { name: 'Russian', code: 'ru' },
    { name: 'Serbian', code: 'sr' },
    { name: 'Sinhala', code: 'si' },
    { name: 'Slovak', code: 'sk' },
    { name: 'Slovenian', code: 'sl' },
    { name: 'Somali', code: 'so' },
    { name: 'Spanish', code: 'es' },
    { name: 'Swahili', code: 'sw' },
    { name: 'Swedish', code: 'sv' },
    { name: 'Tajik', code: 'tg' },
    { name: 'Tamil', code: 'ta' },
    { name: 'Telugu', code: 'te' },
    { name: 'Thai', code: 'th' },
    { name: 'Turkish', code: 'tr' },
    { name: 'Ukrainian', code: 'uk' },
    { name: 'Urdu', code: 'ur' },
    { name: 'Uzbek', code: 'uz' },
    { name: 'Vietnamese', code: 'vi' },
    { name: 'Welsh', code: 'cy' },
    { name: 'Yiddish', code: 'yi' },
    { name: 'Yoruba', code: 'yo' }
  ];

  // Populate select dropdowns
  const sourceSelect = document.getElementById('source-language');
  const targetSelect = document.getElementById('target-language');

  languages.forEach(lang => {
    const sourceOption = document.createElement('option');
    sourceOption.value = lang.code;
    sourceOption.textContent = `${lang.name} (${lang.code})`;
    sourceSelect.appendChild(sourceOption);

    const targetOption = document.createElement('option');
    targetOption.value = lang.code;
    targetOption.textContent = `${lang.name} (${lang.code})`;
    targetSelect.appendChild(targetOption);
  });

  // Toggle translation input
  enableTranslation.addEventListener('change', function() {
    targetLanguage.disabled = !this.checked;
    if (!this.checked) {
      targetLanguage.value = '';
    }
  });

  // Form submission
  form.addEventListener('submit', async function(e) {
    e.preventDefault();

    // Hide previous results/errors
    statusArea.style.display = 'none';
    resultArea.style.display = 'none';
    errorArea.style.display = 'none';
    document.getElementById('reopen-result-area').style.display = 'none';

    // Show loading
    statusArea.style.display = 'block';
    submitBtn.disabled = true;

    const formData = new FormData();
    formData.append('video_url', document.getElementById('video-url').value);
    formData.append('language', sourceLanguage.value);
    formData.append('translate_to', enableTranslation.checked ? targetLanguage.value : '');
    formData.append('burn', document.querySelector('input[name="output-format"]:checked').value === 'burn');
    formData.append('model', document.getElementById('model-size').value);

    try {
      const response = await fetch('/video-captioner/generate', {
        method: 'POST',
        body: formData
      });

      const data = await response.json();

      statusArea.style.display = 'none';
      submitBtn.disabled = false;

      if (data.success) {
        // Format duration
        const formatDuration = (seconds) => {
          const hours = Math.floor(seconds / 3600);
          const minutes = Math.floor((seconds % 3600) / 60);
          const secs = Math.floor(seconds % 60);
          if (hours > 0) {
            return `${hours}h ${minutes}m ${secs}s`;
          } else if (minutes > 0) {
            return `${minutes}m ${secs}s`;
          } else {
            return `${secs}s`;
          }
        };

        // Get language name from code
        const getLanguageName = (code) => {
          if (!code) return 'Unknown';
          const lang = languages.find(l => l.code === code || l.code.toLowerCase() === code.toLowerCase());
          return lang ? lang.name : code.toUpperCase();
        };

        // Populate modal
        document.getElementById('modal-video-title').textContent = data.video_title || 'Unknown';
        document.getElementById('modal-duration').textContent = data.duration ? formatDuration(data.duration) : 'Unknown';
        document.getElementById('modal-audio-lang').textContent = getLanguageName(data.detected_lang);
        document.getElementById('modal-subtitle-lang').textContent = getLanguageName(data.subtitle_lang);
        document.getElementById('modal-download-link').href = data.download_url;
        document.getElementById('modal-download-link').setAttribute('data-filename', data.output);

        // Show video download button if separate video file exists
        const videoDownloadLink = document.getElementById('modal-video-download-link');
        if (data.video_download_url) {
          videoDownloadLink.href = data.video_download_url;
          videoDownloadLink.style.display = 'inline-block';
          // Update main download button text to say "Download Subtitles"
          document.getElementById('modal-download-link').innerHTML = '<i class="bx bx-download me-2"></i>Download Subtitles';
        } else {
          videoDownloadLink.style.display = 'none';
          document.getElementById('modal-download-link').innerHTML = '<i class="bx bx-download me-2"></i>Download File';
        }

        // Show warning if exists
        if (data.warning) {
          document.getElementById('modal-warning').style.display = 'block';
          document.getElementById('modal-warning-text').textContent = data.warning;
        } else {
          document.getElementById('modal-warning').style.display = 'none';
        }

        // Show modal
        const successModal = new bootstrap.Modal(document.getElementById('successModal'));
        successModal.show();

        // Show "View Result Again" button
        document.getElementById('reopen-result-area').style.display = 'block';
      } else {
        errorArea.style.display = 'block';
        document.getElementById('error-message').textContent = data.error || 'An error occurred';
      }
    } catch (error) {
      statusArea.style.display = 'none';
      errorArea.style.display = 'block';
      submitBtn.disabled = false;
      document.getElementById('error-message').textContent = 'Failed to process video: ' + error.message;
    }
  });

  // Reopen modal functionality
  document.getElementById('reopen-result-btn').addEventListener('click', function() {
    const successModal = new bootstrap.Modal(document.getElementById('successModal'));
    successModal.show();
  });
});
</script>
